#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# papis-short-help: Download citation using scihub.org
# Copyright Â© 2017 Alejandro Gallo. GPLv3
# Last modified: 2017-11-19
import sys
import papis.api
import papis.commands
import papis.crossref
import papis.document


def usage():
    print("Usage: papis hubation <papis-search> <add-flags>")

def print_no_citations_and_exit():
    print('The document does not have any citation information')
    sys.exit(1)


if len(sys.argv) < 2:
    search = ""
else:
    search = sys.argv[1]
    if search in ['-h', '--help']:
        usage()
        sys.exit(0)
    
documents = papis.api.get_documents_in_lib(
    papis.api.get_lib(),
    search=search
)

ref_num = 0

for i in sys.argv:
    if i.isdigit():
        ref_num = int(i)
        sys.argv.remove(i)

add_flags = sys.argv[2:]

doc = papis.api.pick_doc(
        documents
    )

if 'citations' not in doc.keys() or doc['citations'] == []:
    print_no_citations_and_exit()

dois = [d.get('doi') for d in doc['citations']]

print("%s citations found" % len(dois))
print("Fetching citations'")
dois_with_data = []
for j,doi in enumerate(dois):
    progress = "%s/%s (doi: %s)" % (j+1, len(dois), doi)
    sys.stdout.write(progress)
    sys.stdout.flush()
    citation = papis.api.get_documents_in_lib(papis.api.get_lib(),search='doi = "%s"' % doi)
    if citation:
        dois_with_data.append(papis.api.pick_doc(citation))
    else:
        dois_with_data.append(
            papis.crossref.doi_to_data(doi)
        )
    sys.stdout.write("\b" * (len(progress)))
    sys.stdout.write(" " * (len(progress)))
    sys.stdout.flush()
    sys.stdout.write("\b" * (len(progress)))
    if j == int(ref_num)-1:
        if citation:
            dois_with_data = [papis.api.pick_doc(citation)]
        else:
            dois_with_data = [
                papis.crossref.doi_to_data(doi)
            ]
        break
    
documents = [papis.document.Document(data=d) for d in dois_with_data]
doc = papis.api.pick_doc(documents)
doc or sys.exit(0)
doi = doc["doi"]

doi or sys.exit(0)

print('DOI %s selected' % doi)

# set citation as the doc if it's already in the library
citation = papis.api.get_documents_in_lib(papis.api.get_lib(),search='doi = "%s"' % doi)

# get hubation options
config_options = papis.config.get('hubation')

# if open in config_options...
if 'open' in config_options:
    # Check if the citation is already in your library
    if citation:
        # and open the associated file
        papis.commands.main(
            [
                'open', "ref=%s" % doc['ref']
            ]
        )
    else:
        # if it isn't, open in a browser
        papis.document.open_in_browser(doc)
        
elif 'browse' in config_options:
    papis.document.open_in_browser(doc)

else:
    papis.commands.main(
        [
            papis.config.get('hubation'), "ref=%s" % doc['ref']
        ] + add_flags
    )
